jobs:

  # Configure, build, install, and test job
  - job: 'windows_build'
    displayName: 'Windows VS2015'
    pool:
      vmImage: 'vs2015-win2012r2'
    timeoutInMinutes: 360
    variables:
      llvm.version: '7.0.1'
      mkl.version: '2019.1'
      python.version: '3.6'
      cmake.build.type: 'Release'
    steps:
      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"
      # Install Miniconda
      - script: |
          choco install -y miniconda3
          choco install -y doxygen.install
          choco install -y swig
          choco install -y graphviz
          set PATH=C:\tools\miniconda3\Scripts;C:\tools\miniconda3;C:\tools\miniconda3\Library\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          set LIB=C:\tools\miniconda3\Library\lib;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"
      # Configure Miniconda
      - script: |
          conda config --set always_yes yes
          conda info
        displayName: "Configure Miniconda"
      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      - script: |
          conda install cmake ^
                        intel-openmp=$(mkl.version) ^
                        mkl-devel=$(mkl.version) ^
                        fftw ^
                        ninja ^
                        numpy ^
                        pytest ^
                        pytest-xdist ^
                        python=$(python.version)
          conda list
        displayName: "Install conda packages"
      # Install LLVM from chocolatey (the Conda version is old)
      - script: |
          choco install llvm --version $(llvm.version) --yes
          set PATH=C:\Program Files\LLVM\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          clang-cl --version
        displayName: "Install LLVM"
      # Install Intel OpenMP import library
      # NOTE: libiomp5md.lib is located in conda/win/$(mkl.version)
      - script: |
          set LIB=$(Build.SourcesDirectory)\conda\win\$(mkl.version);%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
        displayName: "Install Intel OpenMP import library"
      # Configure
      - script: |
          setlocal EnableDelayedExpansion
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=$(cmake.build.type) ^
                -DCMAKE_INSTALL_PREFIX=../install ^
                $(Build.SourcesDirectory)
        displayName: "Configure OpenMM with CMake"
        workingDirectory: $(Build.BinariesDirectory)
      # Build
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config $(cmake.build.type) ^
                -- -j %NUMBER_OF_PROCESSORS%
        displayName: "Build OpenMM"
        workingDirectory: $(Build.BinariesDirectory)/build
